# Big Data Analytics - Final Project Report

## Developing a Movie Recommender System Using Apache Spark

### Group Number: 8  
**Group Members:** Janelle Bauske, Sandra Chiwike, Nandita Ghildyal

## 1. Introduction
Recommender systems are crucial in industries like e-commerce, social media, and streaming, helping users navigate vast information. Movie recommender systems personalize viewing experiences by analyzing user interactions, demographic data, and item attributes such as genres, actors, and directors. Despite their utility, they face challenges like data sparsity and cold-start problems, limiting their ability to provide accurate and diverse recommendations, especially for new users or items.

To address these challenges, two main approaches are used: collaborative filtering (CF) and content-based filtering (CB). CF leverages user-item interaction patterns for personalized recommendations but struggles with sparse data. CB relies on item attributes like genres and plot summaries, working well without user interaction data but often generating repetitive suggestions. While both methods are effective, they are insufficient when used independently in complex movie recommendation scenarios.

The primary goal of this project is to build a **hybrid recommender system** that combines collaborative filtering with metadata-driven content-based recommendations. This approach enhances personalization, accuracy, and diversity while addressing data sparsity and cold-start problems. By effectively capturing user behavior through collaborative filtering and utilizing rich metadata for content-based insights, the system ensures relevant and novel recommendations, even for users with minimal interaction history.

## 2. Data
We used the **MovieLens User Review** and **MovieLens Tag Genome** datasets as the foundation for data integration and enrichment. To implement a hybrid recommender system, we combined user ratings with detailed movie metadata pulled from the IMDb API. The original dataset included essential information such as user demographics, genres, timestamps, average ratings, and movie tags.

For additional movie information, we extracted each unique IMDb ID from the MovieLens dataset to create API requests. This pulled data included **cast members, localized titles, runtimes, IMDb ratings, plot outlines, and director names**. The process was automated using parallel processing with a thread pool. The retrieved data was then converted into a **Spark DataFrame** with a defined schema for seamless integration.

The final **merged dataset** consisted of **916,355 rows and 20 columns**.

### 2.1 User vs IMDb Ratings Distribution
A comparison between user and IMDb ratings revealed that **IMDb ratings are tightly clustered around 0.8**, while **user ratings show more variability**, peaking near 0.9. To align scales, **user ratings were normalized** from a 5-point scale to match IMDb's 10-point scale.

### 2.2 Occupation-Based Ratings for Popular Genres
A heatmap analysis showed distinct genre preferences across occupations. For instance:
- **Writers** favor **Action|Sci-Fi|Thriller**.
- **Programmers** prefer **Mystery**.
- **Artists** rate **Drama** highly.

### 2.3 Gender and Age-Based Preferences
- Male users favor **Action** and **War** films.
- Female users rate **Film Noir** and **Comedy** more often.
- Age-based analysis revealed preferences for **Drama, Comedy, and Action** across all age groups.

## 3. Methods
We developed and tested **16 models** throughout the project, iterating through preliminary, intermediate, and final stages.

### 3.1 Initial Hybrid Model
Our initial model used **Alternating Least Squares (ALS)** for **collaborative filtering** and **TF-IDF vectorization** for **content-based filtering**. The final prediction was a weighted combination of **60% CF and 40% CB**, but this approach was not optimal and did not fully address the cold-start problem.

### 3.2 Final Model Architecture
Our final model improves upon the initial model by **refining feature engineering and collaborative filtering**. Steps include:
1. Converting **Pandas DataFrame** to a **PySpark DataFrame**.
2. Applying **StringIndexer** for categorical features (e.g., gender, occupation).
3. Using **VectorAssembler** to prepare data for training.
4. Implementing **ALS for collaborative filtering** with optimized parameters.
5. Adjusting **alpha** values dynamically for cold-start mitigation.
6. Combining **40% CF, 40% CB, and 20% IMDb ratings** for a more balanced hybrid approach.

## 4. Results
To evaluate our model, we used:

### 4.1 Accuracy Metrics
| Metric | Initial Model | Final Model |
|--------|--------------|--------------|
| RMSE | 0.90 | **0.83** |
| MAE | 0.72 | **0.46** |

A lower RMSE and MAE indicate **improved prediction accuracy**.

### 4.2 Catalog Coverage
- Initial model: **94.11%** (471,200 movies recommended out of 500,000)
- Final model: **89.55%** (Shift towards more popular recommendations)

### 4.3 Rating Trends
- Older movies (1950s) have higher ratings.
- Female users rate **1910s movies** higher than male users.
- Newer movies tend to receive **lower average ratings** due to higher rating volume.

## 5. Conclusion
Our final hybrid recommender system successfully improved recommendation accuracy by combining **collaborative filtering and content-based filtering** with IMDb metadata. The project demonstrated the **importance of balancing different filtering approaches** while tackling challenges such as **cold-start problems and data sparsity**.

Future improvements could explore **deep learning models** such as **Neural Collaborative Filtering (NCF)** and **transformer-based architectures** for further enhancing recommendation quality.

